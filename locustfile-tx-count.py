#!/usr/bin/env python

########################################################################
# NOTE: SCRIPT NEEDS TO BE COMPATIBLE WITH PYPY3!
#
# This is the absolute, simplest Locust example that exists.
# All it does is demonstrate is how to create a Locust task
# and utilize the 'Host' parameter in the Locust UI
# to dynamically pass in variables to the script
# so you don't need to hardcode any sensitive logic
# and offers reusability for future projects.
#
# ANYTHING THAT REQUIRES YOUR ATTENTION WILL HAVE A TODO IN THE COMMENTS
# Do not create external files outside of this locust file.
# mLocust only allows you to upload a single python file atm.
#
########################################################################

# Allows us to make many pymongo requests in parallel to overcome the single threaded problem
import gevent
_ = gevent.monkey.patch_all()

########################################################################
# TODO Add any additional imports here.
# TODO Make sure to include in requirements.txt, if necessary.
########################################################################
import pymongo
from locust import User, events, task
from random import choice, choices, random
from string import digits, ascii_lowercase, ascii_uppercase
from datetime import datetime, timedelta
import time

# Global vars
# Store the client conn globally so we don't create a conn pool for every user
# Track the srv globally so we know if we need to reinit the client
_CLIENT = None
_SRV = None

class MetricsLocust(User):

    ########################################################################
    # Class variables.
    # The values are initialized with None till they get set
    # from the actual locust exeuction when the 'Host' param is passed in.
    ########################################################################
    client, coll = None, None

    ####################################################################
    # You can throttle tasks being executed by each simulated user
    # Only do this if the client really wants to simulate n-number
    # of users. Otherwise, if you leave this commented out,
    # the performance will increase by 400%
    ####################################################################
    # wait_time = between(1, 1)

    ####################################################################
    # Initialize any env vars from the Host parameter
    # Set the target collections and such here
    ####################################################################
    def __init__(self, parent):
        global _CLIENT, _SRV

        super().__init__(parent)

        try:
            # Parse out env variables from the host
            vars = self.host.split("|")
            print("Host Param:",self.host)
            srv = vars[0]
            if _SRV != srv:
                self.client = pymongo.MongoClient(srv)
                _CLIENT = self.client
                _SRV = srv
            else:
                self.client = _CLIENT

            db = self.client[vars[1]]
            self.coll = db[vars[2]]
            self.do_quick_search = int(vars[3]) is 1
            self.response_size = int(vars[4])
        except Exception as e:
            # If an exception is caught, Locust will show a task with the error msg in the UI for ease
            events.request.fire(request_type="Host Init Failure", name=str(e), response_time=0, response_length=0, exception=e)
            raise e

    ################################################################
    # Example helper function that is not a Locust task.
    # All Locust tasks require the @task annotation
    # TODO Create any additional helper functions here
    ################################################################
    def get_time(self):
        return time.time()


    def random_account_no(self):
        return ''.join(choices(digits, k=12))


    def random_number(self, min, max):
        return int(random() * (max - min) + min)

    INDEX_NAME = "default"

    # FIELD NAME DEFINITIONS
    ACCOUNT_NUMBER = "Acc.No"
    ACCOUNT_NAME = "Acc.Nm"
    CUSTOMER_REFERENCE = 'CstRf'
    TRANSACTION_TYPE = 'TxTp'
    ENTERED_DATE = "EntDt"
    TRANSACTION_ENTERED_DATE = 'TxEntDt'
    AMOUNT = 'Amt'
    CURRENCY = 'Ccy'
    IBAN = 'Ibn'

    SEARCH_FIELDS = [
        ACCOUNT_NUMBER,
        CUSTOMER_REFERENCE,
        TRANSACTION_TYPE,
        IBAN,
        ACCOUNT_NAME
    ]

    # SORT DEFINITIONS
    ASCENDING = 1
    DESCENDING = -1

    SORT_FIELDS = [
        ACCOUNT_NUMBER,
        CUSTOMER_REFERENCE,
        TRANSACTION_TYPE,
        ENTERED_DATE,
        TRANSACTION_ENTERED_DATE,
        AMOUNT,
        CURRENCY,
        IBAN
    ]

    def account_no_in(self, accounts):
        return {
            'in': {
                'path': self.ACCOUNT_NUMBER,
                'value': accounts
            }
        }


    def account_no_eq(self, account):
        return {
            'equals': {
                'path': self.ACCOUNT_NUMBER,
                'value': account
            }
        }

    def date_range(self, start, end, path=ENTERED_DATE):
        return {
            'range': {
                'path': path,
                'gt': start,
                'lt': end
            }
        }


    def date_range_days_from_today(self, days, path=ENTERED_DATE):
        return self.date_range(
            datetime.now() - timedelta(days=days),
            datetime.now(),
            path
        )


    def sort(self, primary_field, primary_direction, secondary_field=None, secondary_direction=None):
        sort = { primary_field: primary_direction }

        if secondary_field:
            sort[secondary_field] = secondary_direction

        return sort


    def DEFAULT_SORT(self):
        return self.sort(primary_field=self.ENTERED_DATE, primary_direction=self.DESCENDING)


    def skip_to_page(self, page=1, size=200):
        return { '$skip': (page - 1) * size }

    # Return a random integer with decreasing likelyhood of being higher
    # start: the initial value
    # increment: the amount to increment the value by each decay
    # decay: the likelyhood of returning the current value
    def random_decay(self, start=1, increment=1, decay=0.5):
        x = random()
        n = start
        while x > decay:
            x = random()
            n += increment
        return n


    # Skip to a random page with decreasing likelyhood of skipping
    # i.e. page 1 is 50% likely, page 2 is 25% likely, page 3 is 12.5% likely, etc.
    def skip_to_random_page(self):
        return self.skip_to_page(self.random_decay())


    def limit_page(self, size=200):
        return { '$limit': size }


    # Pre-generated list of {} account nos with n thousand transactions
    # 105700000 transactions total

    # 370 accounts with 60k transactions each
    account_nos_60k = ['000454544271', '001999863617', '002140917531', '003902311529', '009421615685', '010139200724', '011781033164', '015480496230', '021816973752', '022068769299', '031986868948', '033373996924', '033546218271', '036488596220', '048278431616', '054019101845', '063340278117', '064379353980', '064521146771', '066623417017', '066669644304', '067861025606', '069150063405', '070586827245', '072915482618', '073304009060', '073544657177', '074416009039', '074991844668', '076694546900', '081857526056', '083309098968', '090970191238', '098500899820', '101566035120', '104819351204', '105082515510', '105335117293', '105349410029', '105991378350', '107660185790', '110443519261', '111975591062', '114355015942', '115752310014', '119943620286', '124006451239', '124978103129', '126417775498', '128346641379', '128464575601', '135402088317', '142159486319', '142778581416', '145101549501', '146821590121', '147171501927', '150678409261', '155065770330', '155266997934', '159540164143', '165664456165', '166681909119', '167312313354', '168619781318', '168850303995', '170905247124', '172785058766', '172786528755', '173273364171', '177543310535', '180105402933', '182230950410', '187819539821', '189110154832', '189881495557', '192750756674', '195792400890', '196349021326', '197585427636', '200139450863', '200315180638', '201672957716', '202532854035', '204698516651', '208778472179', '211353269581', '211378559137', '218801556514', '228823759425', '229434716885', '229647571821', '236034147809', '237804586198', '242635907709', '245446861433', '247046335625', '247575740194', '248307250046', '253436891111', '254852979395', '257911845036', '258734299175', '261501473665', '262180901635', '263468286598', '266255130334', '271137522217', '273489408760', '279604323377', '283297498098', '288223963246', '292050583707', '294014604199', '295457187413', '300390368992', '307188213535', '308755654036', '309551812038', '315495837808', '315878076110', '327391872711', '330263247505', '330741430566', '339964523353', '340443551041', '341182611446', '341546496460', '344983703076', '346901389733', '349658772629', '350937784601', '351362225973', '352002601521', '353420378260', '357256909644', '363341673542', '365285394070', '367032567423', '369195395241', '369926481367', '374220683256', '377322831568', '380253835202', '381115687309', '391869398178', '397830443549', '402206588946', '413413985973', '418081613481', '419127803632', '419915179110', '420553071159', '420654481113', '429419923079', '429884252605', '430474256621', '433696001753', '434979971054', '438642615939', '438668948350', '446052855471', '446679046838', '447056728047', '447659124531', '453365768337', '453901859422', '456109640491', '457698193948', '459996711738', '463549263518', '467865525589', '470490801816', '477776577161', '478596394509', '480660803954', '483425521117', '485779034017', '490344746694', '491370473407', '498820995223', '499110533579', '502779862491', '505663737671', '505935422896', '505972993697', '512714538350', '514453404971', '515275899159', '520132013561', '522581636672', '522840293359', '522926409404', '526603697837', '528548754018', '531492398029', '536292493490', '545063539177', '547266229604', '555522920548', '559524098686', '569267171797', '572845874806', '578744290317', '579678098809', '583018134994', '585165953282', '585435147080', '586197933225', '588248726508', '588460259753', '588710701256', '589166176457', '589536264494', '593792723531', '594406711374', '598525878003', '602463644747', '602804162429', '607212042586', '608185123122', '617085600338', '623024311992', '623088055945', '627119819834', '630199216191', '633198654396', '637023562972', '637642666286', '638066811325', '643098326179', '649835130323', '651506265846', '652203066747', '652901460618', '655726113086', '659340653344', '660570447338', '668104735176', '671471769048', '672914321856', '675675819147', '675907314575', '679633190412', '681141390063', '687666868530', '695342898065', '695548817797', '695912267910', '697577639428', '697605619336', '699988870813', '703229379702', '706750131175', '706869199608', '711123270017', '711879577783', '713677061885', '718322256248', '719771412820', '720206497174', '723462624893', '727691700682', '728724674088', '729763316223', '733204170282', '737450329445', '738587039538', '739188834311', '742648103603', '746686468839', '747883202255', '749407884317', '751975448564', '754155843325', '759858680044', '761402737917', '762332011039', '768826065672', '775343405755', '783621627833', '784513207070', '786787791988', '787184551051', '787418976159', '793150204269', '794282147986', '794787385104', '797483773980', '798111402374', '798564888449', '799517638469', '801198057301', '801464935068', '801823005761', '810327283192', '811422217014', '813242963348', '816431075790', '819605902578', '823050272992', '824914759327', '826565793943', '829229401157', '832677712523', '834657329850', '836585885219', '838748353853', '839912917501', '845870893526', '848292086918', '848538016590', '849482230589', '849918547277', '851050072819', '855311490728', '857600174608', '858694379365', '860089981575', '862682004163', '863773089346', '865842803741', '869149892744', '872352977039', '873243763591', '875279114483', '876221151791', '876549516612', '878118723153', '885908462362', '888412029899', '890992427783', '891111571165', '896328978113', '897183407612', '908275903171', '908947747330', '909999556094', '911184424373', '913215036780', '919601208593', '920405898519', '923091653375', '923294875201', '923484782454', '927508322961', '928110858733', '928530649956', '934298508916', '935741885685', '941945751130', '952566888923', '953018619146', '954177599292', '954485305786', '954624340378', '960128904159', '960298195705', '967538625586', '973355538673', '973569977162', '973586086374', '976722699493', '979010555922', '979972275629', '992920676611', '993776682604', '993909753843', '995224611821', '999143532957']
    # 750 accounts with 100k transactions each
    account_nos_100k = ['000606917929', '001804779502', '003779893417', '005749337719', '006809225600', '007027628040', '007130254417', '008898667139', '009759778322', '009962999291', '012155497381', '013634845118', '014770257870', '015090004308', '018468854085', '025330677730', '025490274816', '025609283789', '026659877234', '026995758972', '031029839437', '032204337514', '032586295741', '032727872468', '036992471966', '037014489140', '038031539390', '038724862575', '041027910562', '042764784870', '046044159736', '046859428843', '047237816823', '050530723142', '053637412302', '055471415742', '055702311765', '059152766015', '061934729262', '062416492272', '063250158332', '064434585766', '068103773654', '070618956956', '074205019974', '075899415764', '076053754438', '079132217632', '079498251049', '079708057802', '081425442010', '081865703237', '081916257300', '082172705600', '083284478922', '087762733648', '089887965963', '091021639447', '092236755068', '095319422699', '100407394450', '101160503352', '101959797823', '101999257192', '104931725752', '105538795679', '105553177038', '107220605947', '110100657988', '111241136169', '111249123106', '111744659544', '111862828374', '114180466169', '116946611967', '117006893776', '121019102100', '122200935223', '124198637968', '124278710785', '125497339575', '126901034409', '126999313786', '127806900846', '127913964408', '128172130219', '128590166854', '132307333317', '135285956050', '135331823031', '135980961803', '137853622430', '139736993374', '139981112633', '140836065320', '143229311692', '143543869642', '143912682407', '149263814072', '150997691199', '151810517553', '151940352966', '154280652987', '154614036309', '157283974063', '157478106383', '159750911956', '161771998338', '161803042850', '162884656488', '165790568234', '165811868296', '166753488618', '166958814152', '169282185615', '172228549986', '173111002459', '173511088271', '173769322329', '174307873614', '174680347346', '178408391020', '178628509625', '179586067439', '182208355078', '182492677814', '182917109542', '183038400808', '183567301047', '184080463773', '187312433892', '187730000867', '188194038435', '189360091177', '189683682667', '190394463699', '192629751153', '194071363280', '194208683746', '196008960272', '196554772085', '197722600462', '198614072791', '199140604088', '200140146576', '202269750224', '205275350714', '208923131234', '208990852686', '209963797766', '210400309338', '210918681662', '211750151719', '211900845305', '215936495068', '216817081676', '217325396436', '220522901954', '224046331550', '226362707717', '230418959465', '231269851249', '231295837337', '232056164286', '232717873606', '236136096612', '237417812546', '238202682435', '238253311885', '239221695211', '241146766389', '241245379169', '241696138912', '242702116171', '245655612973', '245902533592', '246510520060', '246949221257', '249081313617', '249624327176', '253628642657', '253651456774', '254046950462', '254415251195', '254632011309', '255235726085', '257972168807', '258025033738', '258054325278', '258172903232', '258802424003', '260947665761', '262534759382', '263590664763', '263748625131', '266450694974', '267350401480', '272396489235', '274021642584', '274160972544', '274421294999', '274953111646', '277011491672', '278099363956', '282110443811', '284000675017', '284541013256', '286683449283', '287987337180', '289895730723', '290113916435', '290713065150', '292349970228', '296483712766', '296953216055', '297391432667', '300337726976', '302794343440', '307608399017', '307701097590', '309385072846', '310302040418', '310940939060', '312768895972', '315356859634', '317047395962', '317211730658', '317720211993', '319217214727', '321435173807', '326648339745', '326953210306', '329774011746', '330933824994', '332389515744', '332784697683', '334645524619', '335459767483', '335935646240', '336355057529', '343417854698', '343423950330', '344287931643', '346160398428', '350977254278', '356425211043', '356863624030', '359942507323', '360061042038', '360270344656', '361632540166', '362818486134', '366430072737', '367523768182', '367581751469', '368843759055', '369018549986', '369143941661', '369439904078', '371154875417', '371620498581', '373795186031', '373846301741', '373890217880', '374971384198', '376306392273', '376413008461', '377057962662', '377081003843', '377836696811', '378054025557', '382147820426', '383435799324', '383872981348', '384638520099', '387657803566', '390200648661', '390627748314', '391102241394', '391960065273', '392589068264', '392761178246', '393438258556', '394550147767', '394747243280', '395554799251', '397099146864', '399136191748', '400102155240', '404106164740', '404256187630', '405377973219', '406516957292', '406959933915', '407906478715', '409058184884', '411018994876', '411446419177', '412195261306', '412350316566', '412392316521', '416181339553', '416764712612', '416954867024', '421703228986', '422106663735', '422759087432', '424015617514', '424656791967', '424679886660', '425564221553', '425889496333', '427582456005', '428015666133', '429283939534', '431250675177', '431430011012', '431759455778', '432008717573', '435761791857', '438583810181', '440740689499', '441022304376', '445914264079', '446675296932', '447270414544', '447673569962', '450917193755', '452394785670', '452402452355', '453303645779', '453506971684', '456376295061', '463998452099', '468439945028', '468457214059', '469108541293', '471144985251', '472447986634', '472689712063', '473623549626', '474034263032', '477155162197', '478277835581', '479447527781', '480317929632', '482457793259', '482865286649', '482949488365', '487128149031', '488457103230', '489217175198', '489315395528', '489428503405', '489836674083', '491129786426', '491391583870', '491829800016', '494532796819', '495420154437', '499202035262', '500247156219', '500445401064', '500958166991', '501190136765', '503420921585', '503833720448', '504747092602', '505154472963', '505527486477', '505765116674', '507691975580', '508182007114', '508454408791', '508720315972', '508850813515', '510114562127', '510141071106', '510798300361', '512260575284', '513945910328', '514480587917', '515103967554', '515487202604', '517163134023', '518679655790', '518740140754', '518807549200', '520382341547', '522277736664', '522982810535', '523323526909', '524328554290', '524862382854', '525621687409', '525754228828', '526729841670', '527295719618', '528149423498', '528505941991', '530298137683', '532350842709', '532774302799', '534852043075', '536913012924', '537026340212', '537647966038', '538030595062', '538417004352', '539951855608', '540199603794', '543411040891', '543549887971', '544273668879', '546846370242', '547342582447', '547586321121', '550583799487', '552856410444', '553677223846', '553977435969', '555222881301', '559499245503', '560025621566', '562726206566', '563764206146', '564856090005', '565924998159', '568324015472', '570114640205', '570226215747', '571051613416', '573376439484', '575661945069', '576925231901', '577096032617', '578772278767', '581685767001', '582255428751', '584325631358', '585726918942', '586495718677', '586563344437', '587752688372', '589383863994', '591923889174', '592025679746', '592041496827', '592332484925', '592808362104', '595749590658', '596229197176', '596892195496', '598916140055', '599046270746', '599450956496', '601068294504', '601123752384', '602934215475', '604522002496', '605967648983', '608185940125', '608580215036', '609014385855', '610133057582', '610159655370', '611191508375', '612400993350', '613947655679', '613967090129', '616211429628', '617061434159', '618874259741', '619065893546', '619267642950', '620963559842', '620979881755', '622544667348', '622821194854', '622874563474', '623279615294', '624055474844', '624171664109', '625354414400', '626532079998', '627150086630', '627938027392', '628145204849', '628357208511', '631266340987', '632033993896', '632445385150', '632927017556', '633407343132', '634003036706', '634894388636', '635985712939', '637624410696', '640741198788', '644083835376', '644846499104', '645165694120', '645696020399', '646688217925', '647488340559', '648337891519', '649411142658', '651044917387', '651111749810', '654284413257', '654304250371', '654473000709', '659526121298', '661138831665', '662416171197', '663652192443', '666244943748', '667466427869', '667707843014', '667847349925', '669575890845', '672500362279', '673229221348', '674543675054', '677127742151', '678604052197', '680911819570', '682111974733', '683700258868', '685326275116', '687000369420', '688764222906', '689158674583', '689642030619', '691959450164', '694483764653', '696125017741', '697451603428', '697930016532', '698287553541', '699325226937', '699362379400', '699626683996', '700224971597', '703073315678', '703097175515', '703738866319', '705690906135', '706700367574', '713727387532', '717288101202', '721521207110', '721590688602', '722147797916', '723057307289', '723116021423', '723836174527', '723884321730', '724082306908', '724088476406', '724479140986', '724522987114', '724853862184', '725748610837', '726022489594', '729674905649', '729907978638', '730962836436', '731015886589', '732948917620', '734050710153', '736210088919', '738972196720', '739481316874', '740071127924', '741318704002', '742545111904', '743652316598', '743851989725', '743969253009', '745171726203', '746142446376', '746928540731', '748664483450', '749202625683', '749505968260', '750109796032', '752237521909', '753153044056', '755116551137', '755420446374', '756307352288', '756402080314', '758011305267', '763621901074', '764843103509', '769206318590', '769634723912', '770582874486', '773403065483', '775114885598', '775663398384', '777308186483', '777463569602', '778153731176', '778452759032', '779919575943', '781627304458', '784768203421', '785656773397', '786225820646', '786299981185', '786592965282', '786900473976', '790629644449', '790647241592', '791792624496', '791830755785', '792770332832', '793893364521', '793999851908', '794402074599', '794810230824', '796162578394', '797921407555', '800151391931', '801829164862', '802934323620', '804289109390', '806668511328', '807605349499', '807611746310', '808033215540', '808083997418', '809884258714', '811638568910', '811697454178', '812959807310', '813004924956', '813688066270', '813880286173', '814738637173', '816355692518', '817022019042', '821657899721', '822289019657', '826457793630', '826921200271', '829704192279', '834356230517', '834363567854', '835010739844', '835990704037', '838292306239', '840266738425', '840399559397', '845061825096', '845517059114', '852797863211', '854384660585', '860327638155', '861541980670', '866171522825', '866899235475', '867486739968', '868081333193', '871140827984', '872717417737', '873568940134', '874227002532', '874675996179', '874717284016', '875788648464', '880305496370', '880412115639', '880737522042', '889668063910', '892064545324', '894639708748', '896990531430', '897353921315', '904233480661', '904706821922', '905467818608', '909411665044', '909967825365', '910051468191', '910982306485', '911989558687', '917721038626', '918225176903', '922046573802', '923202069990', '927550017751', '931350337532', '931466666386', '931493394701', '931497577500', '933587464799', '934063162726', '934994050903', '936444562094', '937813985699', '937827636421', '938326052725', '938713256455', '940720797795', '940942581868', '941375674296', '941779100358', '941872798409', '942047431128', '942213476622', '943384434978', '943606894872', '943816320287', '945053460856', '950560163148', '951134398585', '951164148546', '954317276201', '954804137454', '955410813921', '957481110236', '957640267359', '958564270743', '961509191667', '961893049737', '962166431545', '962258307761', '964493219368', '965001018769', '965002634463', '967225610607', '968141645279', '968328550287', '969272922383', '970527925137', '976583359822', '979281624418', '982351488552', '984367183028', '984655458719', '985622471233', '987818317341', '993724716908', '993879235285', '997737405585', '997786723227', '999661551364']
    # 17 accounts with 500k transactions each
    account_nos_500k = ['025473296891', '057220049473', '087038350930', '120741624405', '172645506145', '181020148118', '252704455816', '469507067534', '507606964631', '623024311992', '658009467162', '687666868530', '738076198034', '750016433172', '797917893096', '930177166567', '976722699493']

    # Return a pool of account nos that contain specified number of transactions
    def account_pool(self, tx_count):
        r = tx_count
        n500k = int(r / 500000)
        if n500k > len(self.account_nos_500k):
            n500k = len(self.account_nos_500k)
        r = r - n500k * 500000
        n100k = int(r / 100000)
        if n100k > len(self.account_nos_100k):
            n100k = len(self.account_nos_100k)
        r = r - n100k * 100000
        n60k = int(r / 60000)
        if n60k > len(self.account_nos_60k):
            raise ValueError("Cannot generate enough transactions ({})".format(tx_count))
        return choices(self.account_nos_500k, k=n500k) + choices(self.account_nos_100k, k=n100k) + choices(self.account_nos_60k, k=n60k)


    def search_transactions(self, tx_count):
        account_nos = self.account_pool(tx_count)

        return { '$search': {
            'index': self.INDEX_NAME,
            'compound': {
                'filter': [
                    self.account_no_in(account_nos),
                ]
            },
            'sort': self.DEFAULT_SORT(),
            'concurrent': True
        } }


    def quick_search_transactions(self, tx_count):
        account_nos = self.account_pool(tx_count)

        return { '$search': {
            'index': self.INDEX_NAME,
            'compound': {
                'filter': [
                    self.account_no_in(account_nos),
                ],
                'must': [
                    {
                        'regex': {
                            'query': self.random_regex(),
                            'path': self.SEARCH_FIELDS,
                            'allowAnalyzedField': True
                        }
                    }
                ]
            },
            'sort': self.DEFAULT_SORT(),
            'concurrent': True
        } }


    def random_character(self):
        chars = ascii_lowercase + ascii_uppercase + digits
        return choice(chars)


    def random_regex(self, case_insensitive=True, exact_match=False):
        case_insensitive = "(?i)" if case_insensitive else ""
        three_random_characters = ''.join([self.random_character() for _ in range(1, 3)])
        if exact_match:
            return f"{case_insensitive}{three_random_characters}"
        return f"{case_insensitive}.*{three_random_characters}.*"


    # 50% chance of using a single sort field
    # 50% chance of using two sort fields
    # random direction for each field
    def random_sort(self):
        if random() < 0.5:
            return self.sort(choice(self.SORT_FIELDS), choice([1, -1]))
        else:
            sorts = choices(self.SORT_FIELDS, k=2)
            return self.sort(
                sorts[0], choice([1, -1]),
                sorts[1], choice([1, -1])
            )


    ################################################################
    # Start defining tasks and assign a weight to it.
    # All tasks need the @task() notation.
    # Weights indicate the chance to execute, e.g. 1=1x, 5=5x, etc.
    # In locustfile-mimesis.py, the task weights
    # have been parameterized too and dynamically passed in via Host
    # TODO Create any additional task functions here
    ################################################################


    @task(1)
    def _async_filter_search(self):
        # Note that you don't pass in self despite the signature above
        tic = self.get_time();
        name = "";

        try:
            if self.do_quick_search is False:
                name = "Search {} Transactions by Account ID".format(self.response_size)
                self.coll.aggregate([
                    self.search_transactions(self.response_size),
                    self.limit_page()
                ])
            else:
                name = "Quick Search {} Transactions by Account ID and Regex".format(self.response_size)
                self.coll.aggregate([
                    self.quick_search_transactions(self.response_size),
                    self.limit_page()
                ])
            # Get the record from the target collection now
            self.coll.aggregate([
                self.search_transactions(self.response_size) if self.do_quick_search is False else self.quick_search_transactions(self.response_size),
                self.limit_page()
            ])
            events.request.fire(request_type="mlocust", name=name, response_time=(self.get_time()-tic)*1000, response_length=0)
        except Exception as e:
            events.request.fire(request_type="mlocust", name=name, response_time=(self.get_time()-tic)*1000, response_length=0, exception=e)
            # Add a sleep so we don't overload the system with exceptions
            time.sleep(5)
